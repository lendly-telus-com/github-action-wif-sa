name: Listening to Deployment

on:
  workflow_run:
    workflows: ["CI-CD with Environments"]
    types:
      - completed

jobs:
  get-production-context:
    name: Environment Checking
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Configure Workload Identity Federation and generate an access token.
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          create_credentials_file: true
          workload_identity_provider: ${{secrets.WIF_PROVIDER}}
          service_account: ${{secrets.SERVICE_ACCOUNT}}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          workload_identity_pool: ${{secrets.WORKLOAD_IDENTITY_PROVIDER_ID}}
          workload_identity_principal: ${{secrets.SERVICE_ACCOUNT}}
          project_id: ${{secrets.GCP_PROJECT_ID}}

      - name: Get JSON content from GitHub deployments URL and Upload to GCS
        run: |
          json_content=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "${{ github.event.repository.deployments_url }}")
          commit_hash=$(git rev-parse HEAD)          
          filtered_json_array=$(echo "$json_content" | jq --arg commit_hash "$commit_hash" '[.[] | select(.sha == $commit_hash)]')

          if [ -n "$filtered_json_array" ]; then            
            for i in $(seq 0 $(echo "$filtered_json_array" | jq length - 1)); do              
              object=$(echo "$filtered_json_array" | jq ".[$i]")             
              if [ "$(echo "$object" | jq -r '.environment')" == "Production" ]; then                              
                production_status=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$(echo "$object" | jq -r '.statuses_url')")         
                object=$(echo "$object" | jq --argjson production_status "$production_status" '. + {production_status: $production_status}')
              else
              object=$(echo "$object" | jq '. + {production_status: []}')  
              fi              
              filtered_json_array=$(echo "$filtered_json_array" | jq ".[$i] = $object")
            done            
            echo "$filtered_json_array" > "production-deployment-${commit_hash}.json"            
            gsutil cp "production-deployment-${commit_hash}.json" gs://dora-github-production-deployment/
          else
            echo "No matching objects found for commit_hash: $commit_hash"
          fi
