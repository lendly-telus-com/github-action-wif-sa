defaults:
  run:
    working-directory: "terraform"

name: Terraform Poc

# on:
#   workflow_dispatch:

on:
  push:
    branches:
      - main
  pull_request:

env:
  PROJECT_ID: "off-net-dev"
  GAR_LOCATION: "northamerica-northeast1"
  REGION: "northamerica-northeast1"
  APP: "lendly-demo"

jobs:
  terraform:
    name: "Terraform"

    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Configure Workload Identity Federation and generate an access token.
      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          create_credentials_file: true
          workload_identity_provider: ${{secrets.WIF_PROVIDER}}
          service_account: ${{secrets.SERVICE_ACCOUNT}}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.3.0
        with:
          workload_identity_pool: ${{secrets.WORKLOAD_IDENTITY_PROVIDER_ID}}
          workload_identity_principal: ${{secrets.SERVICE_ACCOUNT}}
          project_id: ${{secrets.GCP_PROJECT_ID}}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.MY_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
